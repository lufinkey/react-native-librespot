buildscript {
	ext.getExtOrDefault = {name ->
		return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['Librespot_' + name]
	}

	repositories {
		google()
		mavenCentral()
	}

	dependencies {
		classpath "com.android.tools.build:gradle:8.7.2"
		// noinspection DifferentKotlinGradleVersion
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
	}
}


def isNewArchitectureEnabled() {
	return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
	apply plugin: "com.facebook.react"
}

def getExtOrIntegerDefault(name) {
	return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Librespot_" + name]).toInteger()
}

def supportsNamespace() {
	def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
	def major = parsed[0].toInteger()
	def minor = parsed[1].toInteger()

	// Namespace support was added in 7.3.0
	return (major == 7 && minor >= 3) || major >= 8
}

android {
	if (supportsNamespace()) {
		namespace "com.librespot"

		sourceSets {
			main {
				manifest.srcFile "src/main/AndroidManifestNew.xml"
			}
		}
	}

	compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

	defaultConfig {
		minSdkVersion getExtOrIntegerDefault("minSdkVersion")
		targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
		buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	}

	buildFeatures {
		buildConfig true
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}

	lintOptions {
		disable "GradleCompatible"
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	sourceSets {
		main {
			jniLibs.srcDirs "src/main/libs"

			if (isNewArchitectureEnabled()) {
					java.srcDirs += [
						"generated/java",
						"generated/jni"
					]
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// compileTask -> compileTask.dependsOn ndkBuild
	}
}

repositories {
	mavenCentral()
	google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
	implementation "com.facebook.react:react-android"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

	implementation 'xyz.gianlu.librespot:librespot-decoder-api:1.6.5'
	implementation 'xyz.gianlu.librespot:librespot-sink-api:1.6.5'
	implementation('xyz.gianlu.librespot:librespot-player:1.6.5:thin') {
		exclude group: 'xyz.gianlu.librespot', module: 'librespot-sink'
		exclude group: 'com.lmax', module: 'disruptor'
		exclude group: 'org.apache.logging.log4j'
	}

	implementation 'uk.uuid.slf4j:slf4j-android:1.7.30-0'

	testImplementation 'junit:junit:4.13.2'
	androidTestImplementation 'androidx.test.ext:junit:1.1.3'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

if (isNewArchitectureEnabled()) {
	react {
		jsRootDir = file("../src/")
		libraryName = "Librespot"
		codegenJavaPackageName = "com.librespot"
	}
}
